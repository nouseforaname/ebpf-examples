// Code generated by bpf2go; DO NOT EDIT.
//go:build (386 || amd64) && linux

package main

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type unlinkExecDataT struct {
	Pid   uint32
	Fname [128]uint8
	Comm  [128]uint8
}

// loadUnlink returns the embedded CollectionSpec for unlink.
func loadUnlink() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_UnlinkBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load unlink: %w", err)
	}

	return spec, err
}

// loadUnlinkObjects loads unlink and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*unlinkObjects
//	*unlinkPrograms
//	*unlinkMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadUnlinkObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadUnlink()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// unlinkSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type unlinkSpecs struct {
	unlinkProgramSpecs
	unlinkMapSpecs
	unlinkVariableSpecs
}

// unlinkProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type unlinkProgramSpecs struct {
	DoUnlinkat *ebpf.ProgramSpec `ebpf:"do_unlinkat"`
}

// unlinkMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type unlinkMapSpecs struct {
	Events *ebpf.MapSpec `ebpf:"events"`
}

// unlinkVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type unlinkVariableSpecs struct {
	Edt *ebpf.VariableSpec `ebpf:"_edt"`
}

// unlinkObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadUnlinkObjects or ebpf.CollectionSpec.LoadAndAssign.
type unlinkObjects struct {
	unlinkPrograms
	unlinkMaps
	unlinkVariables
}

func (o *unlinkObjects) Close() error {
	return _UnlinkClose(
		&o.unlinkPrograms,
		&o.unlinkMaps,
	)
}

// unlinkMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadUnlinkObjects or ebpf.CollectionSpec.LoadAndAssign.
type unlinkMaps struct {
	Events *ebpf.Map `ebpf:"events"`
}

func (m *unlinkMaps) Close() error {
	return _UnlinkClose(
		m.Events,
	)
}

// unlinkVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadUnlinkObjects or ebpf.CollectionSpec.LoadAndAssign.
type unlinkVariables struct {
	Edt *ebpf.Variable `ebpf:"_edt"`
}

// unlinkPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadUnlinkObjects or ebpf.CollectionSpec.LoadAndAssign.
type unlinkPrograms struct {
	DoUnlinkat *ebpf.Program `ebpf:"do_unlinkat"`
}

func (p *unlinkPrograms) Close() error {
	return _UnlinkClose(
		p.DoUnlinkat,
	)
}

func _UnlinkClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed unlink_x86_bpfel.o
var _UnlinkBytes []byte
